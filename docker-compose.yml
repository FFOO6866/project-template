# Master Docker Orchestration for Horme Platform
# Simplified production-ready setup with all services
version: '3.8'

services:
  # PostgreSQL Database with Vector Support
  postgres:
    image: pgvector/pgvector:pg15
    container_name: horme-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-horme_db}
      POSTGRES_USER: ${POSTGRES_USER:-horme_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-horme_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/nexus-init.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - horme-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-horme_user} -d ${POSTGRES_DB:-horme_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: horme-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - horme-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec

  # Nexus Multi-Channel Platform
  nexus-platform:
    build:
      context: .
      dockerfile: Dockerfile.nexus
      args:
        BUILD_VERSION: ${BUILD_VERSION:-latest}
        BUILD_DATE: ${BUILD_DATE}
        BUILD_REVISION: ${BUILD_REVISION:-main}
    container_name: horme-nexus
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Core Configuration
      - NEXUS_ENABLE_API=true
      - NEXUS_ENABLE_CLI=true
      - NEXUS_ENABLE_MCP=true
      - NEXUS_API_PORT=8000
      - NEXUS_MCP_PORT=3001
      - ENVIRONMENT=production
      
      # Authentication
      - NEXUS_JWT_SECRET=${NEXUS_JWT_SECRET:-nexus-jwt-secret-change-in-production}
      - NEXUS_API_KEY=${NEXUS_API_KEY:-nexus-api-key-change-in-production}
      
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-horme_user}:${POSTGRES_PASSWORD:-horme_secure_password}@postgres:5432/${POSTGRES_DB:-horme_db}
      - DATAFLOW_DATABASE_URL=postgresql://${POSTGRES_USER:-horme_user}:${POSTGRES_PASSWORD:-horme_secure_password}@postgres:5432/${POSTGRES_DB:-horme_db}
      - REDIS_URL=redis://redis:6379/0
      
      # AI Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      
      # Performance
      - NEXUS_WORKERS=${NEXUS_WORKERS:-2}
      - NEXUS_TIMEOUT=300
      - CACHE_TTL=300
      - MAX_CONNECTIONS=100
      - POOL_SIZE=10
      
      # Security
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - ENABLE_RATE_LIMITING=true
      - RATE_LIMIT_PER_MINUTE=100
      
      # Monitoring
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - LOG_LEVEL=${LOG_LEVEL:-info}
      
    ports:
      - "${NEXUS_API_PORT:-8000}:8000"   # API Server
      - "${NEXUS_MCP_PORT:-3001}:3001"   # MCP Server
      - "${NEXUS_METRICS_PORT:-9090}:9090" # Metrics
    volumes:
      - nexus_logs:/app/logs
      - nexus_data:/app/data
      - nexus_cache:/app/cache
      - nexus_uploads:/app/uploads
    networks:
      - horme-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MCP Server (Standalone)
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.sales-assistant
    container_name: horme-mcp-server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-horme_user}:${POSTGRES_PASSWORD:-horme_secure_password}@postgres:5432/${POSTGRES_DB:-horme_db}
      - REDIS_URL=redis://redis:6379/1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MCP_SERVER_PORT=3002
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "${MCP_SERVER_PORT:-3002}:3002"
    volumes:
      - mcp_logs:/app/logs
      - mcp_data:/app/data
    networks:
      - horme-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./fe-reference
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        NEXT_PUBLIC_MCP_URL: ${NEXT_PUBLIC_MCP_URL:-http://localhost:3001}
    container_name: horme-frontend
    depends_on:
      - nexus-platform
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NEXT_PUBLIC_MCP_URL=${NEXT_PUBLIC_MCP_URL:-http://localhost:3001}
      - NODE_ENV=production
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - horme-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ChromaDB Vector Database (Optional)
  chromadb:
    image: chromadb/chroma:latest
    container_name: horme-chromadb
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
      CHROMA_SERVER_CORS_ALLOW_ORIGINS: '["*"]'
      ANONYMIZED_TELEMETRY: false
      IS_PERSISTENT: true
      PERSIST_DIRECTORY: /chroma/chroma
    ports:
      - "${CHROMADB_PORT:-8001}:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - horme-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - with-vector-db

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: horme-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus-nexus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    networks:
      - horme-network
    restart: unless-stopped
    depends_on:
      - nexus-platform
    profiles:
      - with-monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: horme-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3100}:3000"
    networks:
      - horme-network
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - with-monitoring

volumes:
  # Database volumes
  postgres_data:
  redis_data:
  chromadb_data:
  
  # Application volumes
  nexus_logs:
  nexus_data:
  nexus_cache:
  nexus_uploads:
  mcp_logs:
  mcp_data:
  
  # Monitoring volumes
  prometheus_data:
  grafana_data:

networks:
  horme-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1