# AI-Powered Sales Assistant - Docker Compose Configuration
# Complete stack deployment with all services and dependencies

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sales-assistant-postgres
    environment:
      POSTGRES_DB: sales_assistant
      POSTGRES_USER: sales_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sales_password_change_me}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/docker/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sales_user -d sales_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sales-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sales-assistant-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - sales-network
    restart: unless-stopped

  # AI-Powered Sales Assistant MCP Server
  sales-assistant-mcp:
    build:
      context: .
      dockerfile: Dockerfile.sales-assistant
      target: production
    container_name: sales-assistant-mcp
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://sales_user:${POSTGRES_PASSWORD:-sales_password_change_me}@postgres:5432/sales_assistant
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
      
      # AI API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      COHERE_API_KEY: ${COHERE_API_KEY:-}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY:-}
      
      # Application Configuration
      KAILASH_PRODUCTION: "true"
      PYTHONPATH: "/home/app/src"
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-change_this_jwt_secret_in_production}
      
      # MCP Server Configuration
      MCP_SERVER_HOST: "0.0.0.0"
      MCP_SERVER_PORT: "3001"
      
      # Monitoring
      ENABLE_METRICS: "true"
      ENABLE_MONITORING: "true"
      LOG_LEVEL: "INFO"
    volumes:
      - ./uploads:/home/app/uploads
      - ./rag_storage:/home/app/rag_storage
      - ./logs:/home/app/logs
      - ./cache:/home/app/cache
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Nexus Platform with MCP Integration
  nexus-platform:
    build:
      context: .
      dockerfile: Dockerfile.sales-assistant
      target: production
    container_name: sales-assistant-nexus
    command: ["python", "src/nexus_mcp_integration.py"]
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://sales_user:${POSTGRES_PASSWORD:-sales_password_change_me}@postgres:5432/sales_assistant
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/1
      
      # AI API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      
      # Application Configuration
      KAILASH_PRODUCTION: "true"
      PYTHONPATH: "/home/app/src"
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-change_this_jwt_secret_in_production}
      
      # Nexus Configuration
      NEXUS_API_PORT: "8000"
      NEXUS_MCP_PORT: "3002"
      
      # MCP Server Connection
      SALES_MCP_SERVER_URL: "http://sales-assistant-mcp:3001"
      SALES_MCP_API_KEY: "admin_key"
    volumes:
      - ./uploads:/home/app/uploads
      - ./logs:/home/app/logs
      - ./temp:/home/app/temp
    ports:
      - "8000:8000"
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      sales-assistant-mcp:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - sales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Next.js Frontend (optional - if you want to include it)
  frontend:
    build:
      context: ./fe-reference
      dockerfile: Dockerfile
    container_name: sales-assistant-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
      NEXT_PUBLIC_MCP_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - nexus-platform
    networks:
      - sales-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: sales-assistant-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./deployment/docker/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sales-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: sales-assistant-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_change_me}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/docker/config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/docker/config/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3003:3000"
    depends_on:
      - prometheus
    networks:
      - sales-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sales-assistant-nginx
    volumes:
      - ./deployment/docker/config/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/docker/config/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - nexus-platform
      - frontend
    networks:
      - sales-network
    restart: unless-stopped

  # Vector Database (Qdrant for production RAG)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: sales-assistant-qdrant
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - sales-network
    restart: unless-stopped

  # Elasticsearch for Advanced Document Search (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: sales-assistant-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - sales-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G

  # Kibana for Elasticsearch Management (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: sales-assistant-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - sales-network
    restart: unless-stopped

  # Background Job Processor (Celery)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.sales-assistant
      target: production
    container_name: sales-assistant-celery
    command: ["celery", "-A", "src.celery_app", "worker", "-l", "info"]
    environment:
      DATABASE_URL: postgresql://sales_user:${POSTGRES_PASSWORD:-sales_password_change_me}@postgres:5432/sales_assistant
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/2
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/2
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/2
    volumes:
      - ./uploads:/home/app/uploads
      - ./rag_storage:/home/app/rag_storage
      - ./logs:/home/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - sales-network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.sales-assistant
      target: production
    container_name: sales-assistant-celery-beat
    command: ["celery", "-A", "src.celery_app", "beat", "-l", "info"]
    environment:
      DATABASE_URL: postgresql://sales_user:${POSTGRES_PASSWORD:-sales_password_change_me}@postgres:5432/sales_assistant
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/2
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/2
    depends_on:
      - postgres
      - redis
    networks:
      - sales-network
    restart: unless-stopped

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  qdrant_data:
    driver: local
  elasticsearch_data:
    driver: local

# Networks
networks:
  sales-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
