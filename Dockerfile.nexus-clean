# Pure Docker-based Nexus Multi-Channel Platform
# Linux-only, no Windows dependencies
FROM python:3.11-slim

# Metadata
LABEL maintainer="Nexus Platform Team"
LABEL description="Nexus Multi-Channel Platform (API + CLI + MCP) - Pure Docker"
LABEL version="2.0.0-clean"

# Environment variables - all paths are Linux-based
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONOPTIMIZE=1 \
    PATH="/app/.local/bin:$PATH" \
    NEXUS_HOME=/app \
    NEXUS_CONFIG_DIR=/app/config \
    NEXUS_DATA_DIR=/app/data \
    NEXUS_LOG_DIR=/app/logs

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    ca-certificates \
    build-essential \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create nexus user for security
RUN groupadd -g 1000 nexus && \
    useradd -u 1000 -g nexus -s /bin/bash -m nexus

# Create application directory structure
RUN mkdir -p /app/{config,data,logs,cache,uploads,temp} && \
    chown -R nexus:nexus /app

# Switch to nexus user
USER nexus
WORKDIR /app

# Copy requirements first for better caching
COPY --chown=nexus:nexus requirements*.txt ./
COPY --chown=nexus:nexus src/new_project/requirements-nexus.txt ./requirements-nexus.txt

# Install Python dependencies
RUN pip install --user --upgrade pip setuptools wheel && \
    pip install --user -r requirements-nexus.txt && \
    pip install --user gunicorn uvicorn[standard]

# Copy clean application code (excluding Windows-specific files)
COPY --chown=nexus:nexus src/new_project/core/ ./core/
COPY --chown=nexus:nexus src/new_project/workflows/ ./workflows/
COPY --chown=nexus:nexus src/new_project/config/ ./config/

# Create clean Nexus platform startup script
RUN cat > ./start-nexus-clean.py << 'EOF'
#!/usr/bin/env python3
"""
Clean Nexus Multi-Channel Platform Startup
No Windows dependencies, pure Docker deployment
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def setup_clean_environment():
    """Setup clean environment variables"""
    env_vars = {
        "NEXUS_ENV": os.getenv("NEXUS_ENV", "production"),
        "NEXUS_API_PORT": os.getenv("NEXUS_API_PORT", "8000"),
        "NEXUS_MCP_PORT": os.getenv("NEXUS_MCP_PORT", "3001"),
        "NEXUS_API_HOST": os.getenv("NEXUS_API_HOST", "0.0.0.0"),
        "NEXUS_JWT_SECRET": os.getenv("NEXUS_JWT_SECRET", "nexus-production-secret"),
        "DATABASE_URL": os.getenv("DATABASE_URL", "postgresql://nexus_user:password@postgres:5432/nexus_db"),
        "REDIS_URL": os.getenv("REDIS_URL", "redis://redis:6379/0"),
        "PYTHONPATH": "/app"
    }
    
    for key, value in env_vars.items():
        os.environ[key] = value
        logger.info(f"Set {key}={value}")

def validate_environment():
    """Validate required environment variables"""
    required_vars = [
        "DATABASE_URL", "REDIS_URL", "NEXUS_JWT_SECRET",
        "NEXUS_API_PORT", "NEXUS_MCP_PORT"
    ]
    
    missing = [var for var in required_vars if not os.getenv(var)]
    if missing:
        logger.error(f"Missing required environment variables: {missing}")
        return False
    
    logger.info("Environment validation passed")
    return True

def create_clean_nexus_platform():
    """Create clean Nexus platform without Windows dependencies"""
    try:
        from nexus import Nexus
        from kailash.workflow.builder import WorkflowBuilder
        from kailash.runtime.local import LocalRuntime
        
        # Initialize clean Nexus platform
        app = Nexus(
            api_port=int(os.getenv("NEXUS_API_PORT", "8000")),
            mcp_port=int(os.getenv("NEXUS_MCP_PORT", "3001")),
            enable_auth=True,
            enable_monitoring=True,
            rate_limit=100,
            auto_discovery=False
        )
        
        # Create basic workflow
        workflow = WorkflowBuilder()
        workflow.add_node("PythonCodeNode", "hello", {
            "code": "result = {'message': 'Nexus Clean Platform Ready', 'status': 'healthy'}"
        })
        
        app.register("health_check", workflow.build())
        
        # Enhanced API endpoints
        @app.api_app.get("/api/health")
        async def health_check():
            return {
                "status": "healthy",
                "platform": "nexus-clean",
                "version": "2.0.0-clean",
                "environment": os.getenv("NEXUS_ENV"),
                "timestamp": datetime.utcnow().isoformat()
            }
        
        @app.api_app.get("/api/info")
        async def platform_info():
            return {
                "platform": "Nexus Multi-Channel Platform",
                "version": "2.0.0-clean",
                "channels": ["API", "CLI", "MCP"],
                "features": [
                    "Pure Docker deployment",
                    "No Windows dependencies", 
                    "Multi-channel access",
                    "Production ready"
                ],
                "endpoints": {
                    "api": f"http://0.0.0.0:{os.getenv('NEXUS_API_PORT')}",
                    "mcp": f"http://0.0.0.0:{os.getenv('NEXUS_MCP_PORT')}"
                }
            }
        
        return app
    
    except Exception as e:
        logger.error(f"Failed to create Nexus platform: {e}")
        return None

def main():
    """Main entry point"""
    logger.info("ðŸš€ Starting Clean Nexus Multi-Channel Platform")
    logger.info("   â€¢ No Windows dependencies")
    logger.info("   â€¢ Pure Docker deployment")
    logger.info("   â€¢ Linux environment only")
    
    # Setup environment
    setup_clean_environment()
    
    if not validate_environment():
        logger.error("Environment validation failed")
        sys.exit(1)
    
    # Create and start platform
    app = create_clean_nexus_platform()
    if not app:
        logger.error("Platform creation failed")
        sys.exit(1)
    
    logger.info(f"API Server: http://0.0.0.0:{os.getenv('NEXUS_API_PORT')}")
    logger.info(f"MCP Server: http://0.0.0.0:{os.getenv('NEXUS_MCP_PORT')}")
    logger.info("ðŸŽ¯ Clean Nexus Platform Ready")
    
    # Start the platform
    app.start()

if __name__ == "__main__":
    # Import datetime here to avoid early import issues
    from datetime import datetime
    main()
EOF

# Make startup script executable
RUN chmod +x ./start-nexus-clean.py

# Create health check script
RUN cat > ./health-check.sh << 'EOF'
#!/bin/bash
set -e

echo "Checking Nexus Clean Platform health..."

# Check API server
curl -f "http://localhost:${NEXUS_API_PORT:-8000}/api/health" || exit 1

# Check MCP server  
curl -f "http://localhost:${NEXUS_MCP_PORT:-3001}/health" || exit 1

echo "âœ… All services healthy"
EOF

RUN chmod +x ./health-check.sh

# Expose ports
EXPOSE 8000 3001 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD ./health-check.sh

# Default command
CMD ["python3", "./start-nexus-clean.py"]