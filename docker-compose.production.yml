version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: horme-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: horme_product_db
      POSTGRES_USER: horme_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-horme_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U horme_user -d horme_product_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - horme-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: horme-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - horme-network

  # Nexus Gateway Service
  nexus-gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.nexus-gateway
    container_name: horme-nexus-gateway
    restart: unless-stopped
    environment:
      - NEXUS_ENV=production
      - DATABASE_URL=postgresql://horme_user:${POSTGRES_PASSWORD:-horme_password}@postgres:5432/horme_product_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here}
      - NEXUS_LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"  # REST API
      - "8001:8001"  # WebSocket
      - "8002:8002"  # MCP Server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - nexus_logs:/app/logs
      - nexus_data:/app/data
    networks:
      - horme-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DataFlow Service
  dataflow-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.dataflow-service
    container_name: horme-dataflow
    restart: unless-stopped
    environment:
      - DATAFLOW_ENV=production
      - DATABASE_URL=postgresql://horme_user:${POSTGRES_PASSWORD:-horme_password}@postgres:5432/horme_product_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      - DATAFLOW_LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - dataflow_logs:/app/logs
    networks:
      - horme-network

  # MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp-server
    container_name: horme-mcp-server
    restart: unless-stopped
    environment:
      - MCP_ENV=production
      - DATABASE_URL=postgresql://horme_user:${POSTGRES_PASSWORD:-horme_password}@postgres:5432/horme_product_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
      - MCP_LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "3000:3000"  # MCP WebSocket
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - mcp_logs:/app/logs
    networks:
      - horme-network

  # Classification Service
  classification-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.classification-service
    container_name: horme-classification
    restart: unless-stopped
    environment:
      - CLASSIFICATION_ENV=production
      - DATABASE_URL=postgresql://horme_user:${POSTGRES_PASSWORD:-horme_password}@postgres:5432/horme_product_db
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/3
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLASSIFICATION_LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - classification_logs:/app/logs
      - classification_models:/app/models
    networks:
      - horme-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: horme-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - nexus-gateway
    networks:
      - horme-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  horme-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nexus_logs:
    driver: local
  nexus_data:
    driver: local
  dataflow_logs:
    driver: local
  mcp_logs:
    driver: local
  classification_logs:
    driver: local
  classification_models:
    driver: local
  nginx_logs:
    driver: local