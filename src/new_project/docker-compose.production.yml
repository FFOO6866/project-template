version: '3.8'

services:
  # Production Nexus Platform
  nexus-production:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: nexus-production
    restart: unless-stopped
    ports:
      - "8000:8000"   # API port
      - "8001:8001"   # WebSocket port  
      - "3001:3001"   # MCP port
    environment:
      # Environment
      - NEXUS_ENV=production
      
      # Server Configuration
      - NEXUS_API_HOST=0.0.0.0
      - NEXUS_API_PORT=8000
      - NEXUS_WEBSOCKET_PORT=8001
      - NEXUS_MCP_PORT=3001
      
      # Database (PostgreSQL)
      - DATABASE_URL=postgresql://horme_user:horme_password@postgres:5432/horme_classification_db
      
      # Redis Cache
      - REDIS_ENABLED=true
      - REDIS_URL=redis://redis:6379/0
      
      # JWT Security
      - NEXUS_JWT_SECRET=${JWT_SECRET:-production-jwt-secret-change-me}
      - NEXUS_JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-production-refresh-secret-change-me}
      - JWT_EXPIRATION_MINUTES=15
      - JWT_REFRESH_EXPIRATION_DAYS=7
      
      # Performance Configuration
      - CACHE_TTL_SECONDS=2700
      - MAX_CONCURRENT_REQUESTS=500
      - REQUEST_TIMEOUT=30
      - BULK_OPERATION_TIMEOUT=600
      - CLASSIFICATION_TIMEOUT=45
      - BATCH_SIZE_LIMIT=2000
      - ENABLE_COMPRESSION=true
      
      # DataFlow Connection Pool
      - DATAFLOW_POOL_SIZE=75
      - DATAFLOW_MAX_OVERFLOW=150
      - DATAFLOW_POOL_RECYCLE=1200
      
      # DataFlow Docker Configuration
      - CONTAINER_ENV=docker
      - DATAFLOW_MONITORING=true
      - DATAFLOW_ECHO_SQL=false
      - DATAFLOW_AUTO_MIGRATE=true
      - DATAFLOW_BULK_BATCH_SIZE=8000
      - DATAFLOW_CACHE_TTL=2700
      - DATAFLOW_QUERY_CACHE_SIZE=15000
      - DATAFLOW_HEALTH_CHECK_INTERVAL=30
      - DATAFLOW_CONNECTION_TIMEOUT=20
      - DATAFLOW_MIGRATION_TIMEOUT=600
      
      # WebSocket Configuration
      - MAX_WEBSOCKET_CONNECTIONS=500
      - WEBSOCKET_HEARTBEAT_INTERVAL=30
      - WEBSOCKET_TIMEOUT=300
      
      # Cache Warming
      - CACHE_WARMING_ENABLED=true
      - ENABLE_REQUEST_BATCHING=true
      
      # Rate Limiting
      - RATE_LIMIT_RPM=300
      - RATE_LIMIT_BURST=50
      
      # CORS Origins (customize for your domain)
      - CORS_ORIGINS=http://localhost:3000,https://your-production-domain.com,https://app.your-domain.com
      
      # Load Balancing
      - ENABLE_LOAD_BALANCING=true
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nexus-network
    volumes:
      - nexus-logs:/app/logs
      - nexus-cache:/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/health/comprehensive"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # PostgreSQL Database with Production Optimizations
  postgres:
    image: postgres:15-alpine
    container_name: nexus-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=horme_classification_db
      - POSTGRES_USER=horme_user
      - POSTGRES_PASSWORD=horme_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres-production.sql:/docker-entrypoint-initdb.d/01-production.sql
      - ./init-scripts/postgres-dataflow-docker.sql:/docker-entrypoint-initdb.d/02-dataflow.sql
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=1000
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U horme_user -d horme_classification_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nexus-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Nginx Load Balancer (Optional - for multiple Nexus instances)
  nginx:
    image: nginx:alpine
    container_name: nexus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - nexus-logs:/var/log/nginx
    depends_on:
      - nexus-production
    networks:
      - nexus-network
    profiles:
      - load-balancer

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: nexus-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nexus-network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: nexus-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - nexus-network
    profiles:
      - monitoring

networks:
  nexus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  nexus-logs:
    driver: local
  nexus-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local