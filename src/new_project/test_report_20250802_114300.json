{
  "start_time": "2025-08-02T11:42:44.638280",
  "total_duration": 16.15547,
  "tiers_run": 1,
  "tiers_passed": 0,
  "tiers_failed": 1,
  "tiers_skipped": 0,
  "failed_tiers": [
    "unit"
  ],
  "docker_services": {
    "docker": false,
    "postgres": false,
    "neo4j": false,
    "chromadb": false,
    "redis": false
  },
  "overall_success": false,
  "results": {
    "unit": {
      "tier": "unit",
      "success": false,
      "return_code": 1,
      "duration": 16.154485,
      "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.11.9, pytest-8.4.1, pluggy-1.6.0 -- C:\\Users\\fujif\\OneDrive\\Documents\\GitHub\\horme-pov\\venv\\Scripts\\python.exe\ncachedir: .pytest_cache\nrootdir: C:\\Users\\fujif\\OneDrive\\Documents\\GitHub\\horme-pov\\src\\new_project\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, Faker-37.5.3, asyncio-1.1.0, cov-6.2.1, forked-1.6.0, split-0.10.0, timeout-2.4.0, xdist-3.8.0\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ntimeout: 1.0s\ntimeout method: thread\ntimeout func_only: False\ncollecting ... collected 358 items\n\ntests/unit/test_chromadb_vector_database.py::TestChromaDBCollections::test_collection_types_defined PASSED [  0%]\ntests/unit/test_chromadb_vector_database.py::TestChromaDBCollections::test_product_collection_config PASSED [  0%]\ntests/unit/test_chromadb_vector_database.py::TestChromaDBCollections::test_manual_collection_config PASSED [  0%]\ntests/unit/test_chromadb_vector_database.py::TestChromaDBCollections::test_safety_collection_config PASSED [  1%]\ntests/unit/test_chromadb_vector_database.py::TestChromaDBCollections::test_project_collection_config PASSED [  1%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_service_initialization PASSED [  1%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_create_collection FAILED [  1%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_add_product_embedding PASSED [  2%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_add_manual_embedding PASSED [  2%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_add_safety_embedding PASSED [  2%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_add_project_pattern_embedding PASSED [  3%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_similarity_search_products PASSED [  3%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_similarity_search_with_filters PASSED [  3%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_batch_add_embeddings PASSED [  3%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_delete_embedding PASSED [  4%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_update_embedding PASSED [  4%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_get_collection_stats PASSED [  4%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_error_handling_invalid_embedding_dimension PASSED [  5%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_error_handling_missing_required_fields PASSED [  5%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_error_handling_collection_not_found PASSED [  5%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabasePerformance::test_embedding_creation_performance PASSED [  5%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabasePerformance::test_similarity_search_performance PASSED [  6%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabasePerformance::test_batch_operations_performance PASSED [  6%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseModels::test_product_embedding_model PASSED [  6%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseModels::test_manual_embedding_model PASSED [  6%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseModels::test_safety_embedding_model PASSED [  7%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseModels::test_project_embedding_model PASSED [  7%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseModels::test_invalid_embedding_vector_dimension PASSED [  7%]\ntests/unit/test_chromadb_vector_database.py::TestVectorDatabaseModels::test_invalid_severity_level PASSED [  8%]\ntests/unit/test_classification_models.py::TestUNSPSCCodeModel::test_unspsc_model_has_db_decorator PASSED [  8%]\ntests/unit/test_classification_models.py::TestUNSPSCCodeModel::test_unspsc_model_fields PASSED [  8%]\ntests/unit/test_classification_models.py::TestUNSPSCCodeModel::test_unspsc_code_primary_key PASSED [  8%]\ntests/unit/test_classification_models.py::TestUNSPSCCodeModel::test_unspsc_hierarchical_structure PASSED [  9%]\ntests/unit/test_classification_models.py::TestUNSPSCCodeModel::test_unspsc_code_validation_logic PASSED [  9%]\ntests/unit/test_classification_models.py::TestUNSPSCCodeModel::test_unspsc_level_hierarchy_validation PASSED [  9%]\ntests/unit/test_classification_models.py::TestUNSPSCCodeModel::test_unspsc_field_constraints PASSED [ 10%]\ntests/unit/test_classification_models.py::TestUNSPSCCodeModel::test_unspsc_auto_generated_nodes PASSED [ 10%]\ntests/unit/test_classification_models.py::TestUNSPSCCodeModel::test_unspsc_indexing_strategy PASSED [ 10%]\ntests/unit/test_classification_models.py::TestETIMClassModel::test_etim_model_has_db_decorator PASSED [ 10%]\ntests/unit/test_classification_models.py::TestETIMClassModel::test_etim_model_fields PASSED [ 11%]\ntests/unit/test_classification_models.py::TestETIMClassModel::test_etim_class_id_primary_key PASSED [ 11%]\ntests/unit/test_classification_models.py::TestETIMClassModel::test_etim_multi_language_support PASSED [ 11%]\ntests/unit/test_classification_models.py::TestETIMClassModel::test_etim_hierarchical_structure PASSED [ 12%]\ntests/unit/test_classification_models.py::TestETIMClassModel::test_etim_version_field PASSED [ 12%]\ntests/unit/test_classification_models.py::TestETIMClassModel::test_etim_field_constraints PASSED [ 12%]\ntests/unit/test_classification_models.py::TestETIMClassModel::test_etim_auto_generated_nodes PASSED [ 12%]\ntests/unit/test_classification_models.py::TestETIMClassModel::test_etim_indexing_strategy PASSED [ 13%]\ntests/unit/test_classification_models.py::TestClassificationIntegration::test_classification_models_exist PASSED [ 13%]\ntests/unit/test_classification_models.py::TestClassificationIntegration::test_product_classification_relationships PASSED [ 13%]\ntests/unit/test_classification_models.py::TestClassificationIntegration::test_classification_hierarchy_queries PASSED [ 13%]\ntests/unit/test_classification_models.py::TestClassificationIntegration::test_classification_search_capabilities PASSED [ 14%]\ntests/unit/test_classification_models.py::TestClassificationDataIntegrity::test_unspsc_code_format_validation PASSED [ 14%]\ntests/unit/test_classification_models.py::TestClassificationDataIntegrity::test_etim_class_id_validation PASSED [ 14%]\ntests/unit/test_classification_models.py::TestClassificationDataIntegrity::test_classification_referential_integrity PASSED [ 15%]\ntests/unit/test_classification_models.py::TestClassificationDataIntegrity::test_classification_uniqueness_constraints PASSED [ 15%]\ntests/unit/test_classification_models.py::TestClassificationPerformance::test_hierarchical_query_optimization PASSED [ 15%]\ntests/unit/test_classification_models.py::TestClassificationPerformance::test_search_performance_optimization PASSED [ 15%]\ntests/unit/test_classification_models.py::TestClassificationPerformance::test_foreign_key_performance PASSED [ 16%]\ntests/unit/test_core_models.py::TestProductModel::test_product_model_has_db_decorator PASSED [ 16%]\ntests/unit/test_core_models.py::TestProductModel::test_product_model_fields PASSED [ 16%]\ntests/unit/test_core_models.py::TestProductModel::test_product_field_constraints PASSED [ 17%]\ntests/unit/test_core_models.py::TestProductModel::test_product_soft_delete_support PASSED [ 17%]\ntests/unit/test_core_models.py::TestProductModel::test_product_audit_trail_support PASSED [ 17%]\ntests/unit/test_core_models.py::TestProductModel::test_product_auto_generated_nodes PASSED [ 17%]\ntests/unit/test_core_models.py::TestProductModel::test_product_specifications_jsonb_field PASSED [ 18%]\ntests/unit/test_core_models.py::TestProductCategoryModel::test_product_category_model_has_db_decorator PASSED [ 18%]\ntests/unit/test_core_models.py::TestProductCategoryModel::test_product_category_hierarchical_fields PASSED [ 18%]\ntests/unit/test_core_models.py::TestProductCategoryModel::test_product_category_self_reference PASSED [ 18%]\ntests/unit/test_core_models.py::TestProductCategoryModel::test_product_category_unspsc_integration PASSED [ 19%]\ntests/unit/test_core_models.py::TestProductCategoryModel::test_product_category_level_field PASSED [ 19%]\ntests/unit/test_core_models.py::TestProductCategoryModel::test_product_category_auto_generated_nodes PASSED [ 19%]\ntests/unit/test_core_models.py::TestProductSpecificationModel::test_product_specification_model_exists PASSED [ 20%]\ntests/unit/test_core_models.py::TestProductSpecificationModel::test_product_specification_has_db_decorator PASSED [ 20%]\ntests/unit/test_core_models.py::TestProductSpecificationModel::test_product_specification_fields PASSED [ 20%]\ntests/unit/test_core_models.py::TestProductSpecificationModel::test_product_specification_product_relationship PASSED [ 20%]\ntests/unit/test_core_models.py::TestDataFlowIntegration::test_dataflow_instance_configuration PASSED [ 21%]\ntests/unit/test_core_models.py::TestDataFlowIntegration::test_models_generate_crud_operations PASSED [ 21%]\ntests/unit/test_core_models.py::TestDataFlowIntegration::test_postgresql_compatibility PASSED [ 21%]\ntests/unit/test_core_models.py::TestDataFlowIntegration::test_indexing_strategy PASSED [ 22%]\ntests/unit/test_core_models.py::TestModelValidation::test_required_field_validation PASSED [ 22%]\ntests/unit/test_core_models.py::TestModelValidation::test_field_length_constraints PASSED [ 22%]\ntests/unit/test_core_models.py::TestModelValidation::test_foreign_key_constraints PASSED [ 22%]\ntests/unit/test_core_models.py::TestModelValidation::test_unique_constraints PASSED [ 23%]\ntests/unit/test_core_models.py::TestPerformanceConsiderations::test_indexing_for_search_fields PASSED [ 23%]\ntests/unit/test_core_models.py::TestPerformanceConsiderations::test_jsonb_indexing_support PASSED [ 23%]\ntests/unit/test_core_models.py::TestPerformanceConsiderations::test_hierarchical_query_support PASSED [ 24%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPipeline::test_pipeline_initialization PASSED [ 24%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPipeline::test_component_availability_check PASSED [ 24%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPipeline::test_component_failure_handling FAILED [ 24%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPipeline::test_request_validation PASSED [ 25%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPipeline::test_invalid_request_validation FAILED [ 25%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestRecommendationEngine::test_knowledge_graph_recommendations PASSED [ 25%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestRecommendationEngine::test_vector_database_recommendations PASSED [ 25%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestRecommendationEngine::test_openai_recommendations PASSED [ 26%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestRecommendationEngine::test_safety_requirements_integration FAILED [ 26%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestRecommendationEngine::test_parallel_component_execution PASSED [ 26%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestResultMerger::test_result_deduplication FAILED [ 27%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestResultMerger::test_confidence_scoring PASSED [ 27%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestResultMerger::test_ranking_algorithm PASSED [ 27%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestResultMerger::test_budget_filtering PASSED [ 27%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestResultMerger::test_skill_level_filtering PASSED [ 28%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestResultMerger::test_confidence_threshold_filtering PASSED [ 28%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationWorkflow::test_complete_recommendation_workflow FAILED [ 28%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationWorkflow::test_caching_mechanism PASSED [ 29%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationWorkflow::test_fallback_mechanism FAILED [ 29%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPerformance::test_recommendation_pipeline_performance PASSED [ 29%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPerformance::test_parallel_execution_performance PASSED [ 29%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPerformance::test_caching_performance_improvement FAILED [ 30%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationModels::test_hybrid_recommendation_request_model PASSED [ 30%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationModels::test_hybrid_recommendation_response_model PASSED [ 30%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationModels::test_confidence_metrics_model PASSED [ 31%]\ntests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationModels::test_invalid_confidence_scores PASSED [ 31%]\ntests/unit/test_neo4j_knowledge_graph.py::TestNeo4jSchema::test_schema_node_types_defined PASSED [ 31%]\ntests/unit/test_neo4j_knowledge_graph.py::TestNeo4jSchema::test_schema_relationship_types_defined PASSED [ 31%]\ntests/unit/test_neo4j_knowledge_graph.py::TestNeo4jSchema::test_tool_node_properties PASSED [ 32%]\ntests/unit/test_neo4j_knowledge_graph.py::TestNeo4jSchema::test_task_node_properties PASSED [ 32%]\ntests/unit/test_neo4j_knowledge_graph.py::TestNeo4jSchema::test_safety_rule_node_properties PASSED [ 32%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_service_initialization PASSED [ 32%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_create_tool_node FAILED [ 33%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_create_task_node FAILED [ 33%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_create_safety_rule_node FAILED [ 33%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_create_used_for_relationship FAILED [ 34%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_create_requires_safety_relationship FAILED [ 34%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_find_tools_for_task FAILED [ 34%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_find_safety_requirements_for_tool FAILED [ 34%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_get_compatible_tools FAILED [ 35%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_error_handling_connection_failure PASSED [ 35%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_error_handling_invalid_node_data PASSED [ 35%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_error_handling_cypher_query_failure FAILED [ 36%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphPerformance::test_node_creation_performance ERROR [ 36%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphPerformance::test_relationship_creation_performance ERROR [ 36%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphPerformance::test_query_performance ERROR [ 36%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphModels::test_tool_model_validation PASSED [ 37%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphModels::test_task_model_validation PASSED [ 37%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphModels::test_safety_rule_model_validation PASSED [ 37%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphModels::test_invalid_tool_model PASSED [ 37%]\ntests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphModels::test_invalid_task_model PASSED [ 38%]\ntests/unit/test_openai_integration.py::TestPromptTemplates::test_prompt_template_initialization PASSED [ 38%]\ntests/unit/test_openai_integration.py::TestPromptTemplates::test_tool_recommendation_template FAILED [ 38%]\ntests/unit/test_openai_integration.py::TestPromptTemplates::test_safety_assessment_template PASSED [ 39%]\ntests/unit/test_openai_integration.py::TestPromptTemplates::test_project_analysis_template FAILED [ 39%]\ntests/unit/test_openai_integration.py::TestPromptTemplates::test_requirement_analysis_template FAILED [ 39%]\ntests/unit/test_openai_integration.py::TestPromptTemplates::test_compatibility_check_template PASSED [ 39%]\ntests/unit/test_openai_integration.py::TestPromptTemplates::test_skill_assessment_template PASSED [ 40%]\ntests/unit/test_openai_integration.py::TestPromptTemplates::test_invalid_template_name PASSED [ 40%]\ntests/unit/test_openai_integration.py::TestPromptTemplates::test_missing_template_variables PASSED [ 40%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_service_initialization PASSED [ 41%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_tool_recommendation_analysis PASSED [ 41%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_safety_assessment_analysis PASSED [ 41%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_project_analysis PASSED [ 41%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_natural_language_query_processing PASSED [ 42%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_response_validation_and_parsing FAILED [ 42%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_error_handling_invalid_json_response PASSED [ 42%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_error_handling_api_failure PASSED [ 43%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_rate_limiting_and_retry_logic FAILED [ 43%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_token_usage_tracking PASSED [ 43%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_prompt_optimization FAILED [ 43%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationPerformance::test_tool_recommendation_performance FAILED [ 44%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationPerformance::test_safety_assessment_performance PASSED [ 44%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationPerformance::test_query_processing_performance PASSED [ 44%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationModels::test_tool_recommendation_request_model PASSED [ 44%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationModels::test_tool_recommendation_response_model PASSED [ 45%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationModels::test_safety_assessment_request_model PASSED [ 45%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationModels::test_safety_assessment_response_model PASSED [ 45%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationModels::test_invalid_skill_level PASSED [ 46%]\ntests/unit/test_openai_integration.py::TestOpenAIIntegrationModels::test_invalid_confidence_score PASSED [ 46%]\ntests/unit/test_safety_models.py::TestSafetyStandardModel::test_safety_standard_model_has_db_decorator PASSED [ 46%]\ntests/unit/test_safety_models.py::TestSafetyStandardModel::test_safety_standard_model_fields PASSED [ 46%]\ntests/unit/test_safety_models.py::TestSafetyStandardModel::test_safety_standard_unique_code_constraint PASSED [ 47%]\ntests/unit/test_safety_models.py::TestSafetyStandardModel::test_safety_standard_type_validation PASSED [ 47%]\ntests/unit/test_safety_models.py::TestSafetyStandardModel::test_safety_severity_level_validation PASSED [ 47%]\ntests/unit/test_safety_models.py::TestSafetyStandardModel::test_safety_standard_effective_date PASSED [ 48%]\ntests/unit/test_safety_models.py::TestSafetyStandardModel::test_safety_standard_regulation_text PASSED [ 48%]\ntests/unit/test_safety_models.py::TestSafetyStandardModel::test_safety_standard_auto_generated_nodes PASSED [ 48%]\ntests/unit/test_safety_models.py::TestSafetyStandardModel::test_safety_standard_audit_trail PASSED [ 48%]\ntests/unit/test_safety_models.py::TestComplianceRequirementModel::test_compliance_requirement_model_has_db_decorator PASSED [ 49%]\ntests/unit/test_safety_models.py::TestComplianceRequirementModel::test_compliance_requirement_model_fields PASSED [ 49%]\ntests/unit/test_safety_models.py::TestComplianceRequirementModel::test_compliance_requirement_foreign_keys PASSED [ 49%]\ntests/unit/test_safety_models.py::TestComplianceRequirementModel::test_compliance_requirement_mandatory_flag PASSED [ 50%]\ntests/unit/test_safety_models.py::TestComplianceRequirementModel::test_compliance_requirement_ppe_flag PASSED [ 50%]\ntests/unit/test_safety_models.py::TestComplianceRequirementModel::test_compliance_requirement_text_field PASSED [ 50%]\ntests/unit/test_safety_models.py::TestComplianceRequirementModel::test_compliance_requirement_auto_generated_nodes PASSED [ 50%]\ntests/unit/test_safety_models.py::TestPPERequirementModel::test_ppe_requirement_model_exists PASSED [ 51%]\ntests/unit/test_safety_models.py::TestPPERequirementModel::test_ppe_requirement_has_db_decorator PASSED [ 51%]\ntests/unit/test_safety_models.py::TestPPERequirementModel::test_ppe_requirement_fields PASSED [ 51%]\ntests/unit/test_safety_models.py::TestPPERequirementModel::test_ppe_requirement_compliance_relationship PASSED [ 51%]\ntests/unit/test_safety_models.py::TestPPERequirementModel::test_ppe_type_categories PASSED [ 52%]\ntests/unit/test_safety_models.py::TestSafetyModelIntegration::test_safety_models_exist PASSED [ 52%]\ntests/unit/test_safety_models.py::TestSafetyModelIntegration::test_product_safety_relationships PASSED [ 52%]\ntests/unit/test_safety_models.py::TestSafetyModelIntegration::test_safety_hierarchy_relationships PASSED [ 53%]\ntests/unit/test_safety_models.py::TestSafetyModelIntegration::test_safety_data_integrity PASSED [ 53%]\ntests/unit/test_safety_models.py::TestSafetyComplianceValidation::test_mandatory_compliance_validation PASSED [ 53%]\ntests/unit/test_safety_models.py::TestSafetyComplianceValidation::test_severity_level_validation PASSED [ 53%]\ntests/unit/test_safety_models.py::TestSafetyComplianceValidation::test_effective_date_validation PASSED [ 54%]\ntests/unit/test_safety_models.py::TestSafetyComplianceValidation::test_ppe_requirement_validation PASSED [ 54%]\ntests/unit/test_safety_models.py::TestSafetyAuditTrail::test_safety_standard_audit_trail PASSED [ 54%]\ntests/unit/test_safety_models.py::TestSafetyAuditTrail::test_compliance_requirement_audit_trail PASSED [ 55%]\ntests/unit/test_safety_models.py::TestSafetyAuditTrail::test_safety_model_versioning PASSED [ 55%]\ntests/unit/test_safety_models.py::TestSafetyPerformance::test_safety_standard_indexing PASSED [ 55%]\ntests/unit/test_safety_models.py::TestSafetyPerformance::test_compliance_requirement_indexing PASSED [ 55%]\ntests/unit/test_safety_models.py::TestSafetyPerformance::test_safety_search_optimization PASSED [ 56%]\ntests/unit/test_safety_models.py::TestSafetyLegalCompliance::test_osha_standard_support PASSED [ 56%]\ntests/unit/test_safety_models.py::TestSafetyLegalCompliance::test_ansi_standard_support PASSED [ 56%]\ntests/unit/test_safety_models.py::TestSafetyLegalCompliance::test_regulatory_text_storage PASSED [ 56%]\ntests/unit/test_safety_models.py::TestSafetyLegalCompliance::test_compliance_documentation PASSED [ 57%]\ntests/unit/test_sdk_compliance_foundation.py::TestRegisterNodeDecorator::test_register_node_decorator_follows_sdk_standards PASSED [ 57%]\ntests/unit/test_sdk_compliance_foundation.py::TestRegisterNodeDecorator::test_register_node_works_with_minimal_parameters PASSED [ 57%]\ntests/unit/test_sdk_compliance_foundation.py::TestRegisterNodeDecorator::test_register_node_supports_standard_sdk_patterns FAILED [ 58%]\ntests/unit/test_sdk_compliance_foundation.py::TestRegisterNodeDecorator::test_register_node_allows_multiple_registrations PASSED [ 58%]\ntests/unit/test_sdk_compliance_foundation.py::TestSecureGovernedNode::test_secure_governed_node_parameter_validation PASSED [ 58%]\ntests/unit/test_sdk_compliance_foundation.py::TestSecureGovernedNode::test_secure_governed_node_rejects_invalid_parameters PASSED [ 58%]\ntests/unit/test_sdk_compliance_foundation.py::TestSecureGovernedNode::test_secure_governed_node_sanitizes_sensitive_data PASSED [ 59%]\ntests/unit/test_sdk_compliance_foundation.py::TestSecureGovernedNode::test_secure_governed_node_audit_logging PASSED [ 59%]\ntests/unit/test_sdk_compliance_foundation.py::TestNodeExecutionPatterns::test_node_implements_run_as_primary_interface FAILED [ 59%]\ntests/unit/test_sdk_compliance_foundation.py::TestNodeExecutionPatterns::test_workflow_uses_runtime_execute_pattern PASSED [ 60%]\ntests/unit/test_sdk_compliance_foundation.py::TestNodeExecutionPatterns::test_workflow_build_method_called_before_execution FAILED [ 60%]\ntests/unit/test_sdk_compliance_foundation.py::TestStringBasedNodeConfigurations::test_workflow_uses_string_node_references FAILED [ 60%]\ntests/unit/test_sdk_compliance_foundation.py::TestStringBasedNodeConfigurations::test_workflow_rejects_object_based_node_instantiation FAILED [ 60%]\ntests/unit/test_sdk_compliance_foundation.py::TestStringBasedNodeConfigurations::test_workflow_parameter_injection_patterns FAILED [ 61%]\ntests/unit/test_sdk_compliance_foundation.py::TestParameterValidation::test_parameter_validator_enforces_types PASSED [ 61%]\ntests/unit/test_sdk_compliance_foundation.py::TestParameterValidation::test_parameter_validator_handles_required_fields PASSED [ 61%]\ntests/unit/test_sdk_compliance_foundation.py::TestParameterValidation::test_parameter_validator_connection_types PASSED [ 62%]\ntests/unit/test_sdk_compliance_foundation.py::TestComplianceIntegration::test_end_to_end_compliant_workflow PASSED [ 62%]\ntests/unit/test_sdk_compliance_foundation.py::TestComplianceIntegration::test_compliance_violation_detection FAILED [ 62%]\ntests/unit/test_sdk_compliance_foundation.py::TestCompliancePerformance::test_node_registration_performance PASSED [ 62%]\ntests/unit/test_sdk_compliance_foundation.py::TestCompliancePerformance::test_parameter_validation_performance PASSED [ 63%]\ntests/unit/test_test_infrastructure.py::TestDockerConfigurationValidation::test_docker_compose_file_exists PASSED [ 63%]\ntests/unit/test_test_infrastructure.py::TestDockerConfigurationValidation::test_docker_compose_yaml_structure PASSED [ 63%]\ntests/unit/test_test_infrastructure.py::TestDockerConfigurationValidation::test_required_services_defined PASSED [ 63%]\ntests/unit/test_test_infrastructure.py::TestDockerConfigurationValidation::test_service_port_configuration PASSED [ 64%]\ntests/unit/test_test_infrastructure.py::TestDockerConfigurationValidation::test_service_health_checks PASSED [ 64%]\ntests/unit/test_test_infrastructure.py::TestProductDataFactory::test_create_products_returns_list PASSED [ 64%]\ntests/unit/test_test_infrastructure.py::TestProductDataFactory::test_product_data_structure PASSED [ 65%]\ntests/unit/test_test_infrastructure.py::TestProductDataFactory::test_product_code_uniqueness PASSED [ 65%]\ntests/unit/test_test_infrastructure.py::TestProductDataFactory::test_price_range_validation PASSED [ 65%]\ntests/unit/test_test_infrastructure.py::TestProductDataFactory::test_safety_standards_validation PASSED [ 65%]\ntests/unit/test_test_infrastructure.py::TestProductDataFactory::test_skill_level_validation PASSED [ 66%]\ntests/unit/test_test_infrastructure.py::TestProductDataFactory::test_complexity_score_range PASSED [ 66%]\ntests/unit/test_test_infrastructure.py::TestProductDataFactory::test_embedding_vector_properties PASSED [ 66%]\ntests/unit/test_test_infrastructure.py::TestUserProfileFactory::test_create_user_profiles_returns_list PASSED [ 67%]\ntests/unit/test_test_infrastructure.py::TestUserProfileFactory::test_user_profile_data_structure PASSED [ 67%]\ntests/unit/test_test_infrastructure.py::TestUserProfileFactory::test_user_email_format PASSED [ 67%]\ntests/unit/test_test_infrastructure.py::TestUserProfileFactory::test_experience_years_range PASSED [ 67%]\ntests/unit/test_test_infrastructure.py::TestUserProfileFactory::test_user_id_uniqueness PASSED [ 68%]\ntests/unit/test_test_infrastructure.py::TestSafetyStandardFactory::test_create_safety_standards_returns_list PASSED [ 68%]\ntests/unit/test_test_infrastructure.py::TestSafetyStandardFactory::test_safety_standard_structure PASSED [ 68%]\ntests/unit/test_test_infrastructure.py::TestSafetyStandardFactory::test_safety_organization_values PASSED [ 68%]\ntests/unit/test_test_infrastructure.py::TestSafetyStandardFactory::test_compliance_level_values PASSED [ 69%]\ntests/unit/test_test_infrastructure.py::TestKnowledgeGraphDataFactory::test_create_nodes_returns_list PASSED [ 69%]\ntests/unit/test_test_infrastructure.py::TestKnowledgeGraphDataFactory::test_node_structure PASSED [ 69%]\ntests/unit/test_test_infrastructure.py::TestKnowledgeGraphDataFactory::test_node_types_validation PASSED [ 70%]\ntests/unit/test_test_infrastructure.py::TestKnowledgeGraphDataFactory::test_create_relationships_returns_list PASSED [ 70%]\ntests/unit/test_test_infrastructure.py::TestKnowledgeGraphDataFactory::test_relationship_structure PASSED [ 70%]\ntests/unit/test_test_infrastructure.py::TestKnowledgeGraphDataFactory::test_relationship_types_validation PASSED [ 70%]\ntests/unit/test_test_infrastructure.py::TestKnowledgeGraphDataFactory::test_no_self_relationships PASSED [ 71%]\ntests/unit/test_test_infrastructure.py::TestPerformanceTestDataFactory::test_create_load_test_data_structure PASSED [ 71%]\ntests/unit/test_test_infrastructure.py::TestPerformanceTestDataFactory::test_load_test_data_counts PASSED [ 71%]\ntests/unit/test_test_infrastructure.py::TestPerformanceTestDataFactory::test_search_query_types PASSED [ 72%]\ntests/unit/test_test_infrastructure.py::TestPerformanceMonitoring::test_performance_monitor_start_stop PASSED [ 72%]\ntests/unit/test_test_infrastructure.py::TestPerformanceMonitoring::test_performance_monitor_threshold_validation PASSED [ 72%]\ntests/unit/test_test_infrastructure.py::TestComplianceValidation::test_compliance_validator_node_registration_pass PASSED [ 72%]\ntests/unit/test_test_infrastructure.py::TestComplianceValidation::test_compliance_validator_node_registration_fail PASSED [ 73%]\ntests/unit/test_test_infrastructure.py::TestComplianceValidation::test_compliance_validator_assert_compliant_pass PASSED [ 73%]\ntests/unit/test_test_infrastructure.py::TestComplianceValidation::test_compliance_validator_assert_compliant_fail PASSED [ 73%]\ntests/unit/test_test_infrastructure.py::TestTestEnvironmentConfiguration::test_test_data_directory_structure PASSED [ 74%]\ntests/unit/test_test_infrastructure.py::TestTestEnvironmentConfiguration::test_postgres_init_script_exists PASSED [ 74%]\ntests/unit/test_test_infrastructure.py::TestTestEnvironmentConfiguration::test_neo4j_init_script_exists PASSED [ 74%]\ntests/unit/test_test_infrastructure.py::TestTestEnvironmentConfiguration::test_wiremock_mappings_exist PASSED [ 74%]\ntests/unit/test_test_infrastructure.py::TestPerformanceRequirements::test_unit_test_execution_time PASSED [ 75%]\ntests/unit/test_test_infrastructure.py::TestPerformanceRequirements::test_data_generation_performance PASSED [ 75%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_model_has_db_decorator PASSED [ 75%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_model_fields PASSED [ 75%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_user_id_relationship PASSED [ 76%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_skill_level_validation PASSED [ 76%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_experience_years PASSED [ 76%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_safety_certification_flag PASSED [ 77%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_preferred_brands_json_array PASSED [ 77%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_project_types_json_array PASSED [ 77%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_soft_delete_support PASSED [ 77%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_audit_trail_support PASSED [ 78%]\ntests/unit/test_user_profile_models.py::TestUserProfileModel::test_user_profile_auto_generated_nodes PASSED [ 78%]\ntests/unit/test_user_profile_models.py::TestSkillAssessmentModel::test_skill_assessment_model_has_db_decorator PASSED [ 78%]\ntests/unit/test_user_profile_models.py::TestSkillAssessmentModel::test_skill_assessment_model_fields PASSED [ 79%]\ntests/unit/test_user_profile_models.py::TestSkillAssessmentModel::test_skill_assessment_user_profile_relationship PASSED [ 79%]\ntests/unit/test_user_profile_models.py::TestSkillAssessmentModel::test_skill_assessment_category_validation PASSED [ 79%]\ntests/unit/test_user_profile_models.py::TestSkillAssessmentModel::test_skill_assessment_proficiency_score PASSED [ 79%]\ntests/unit/test_user_profile_models.py::TestSkillAssessmentModel::test_skill_assessment_assessor_type PASSED [ 80%]\ntests/unit/test_user_profile_models.py::TestSkillAssessmentModel::test_skill_assessment_temporal_fields PASSED [ 80%]\ntests/unit/test_user_profile_models.py::TestSkillAssessmentModel::test_skill_assessment_certification_level PASSED [ 80%]\ntests/unit/test_user_profile_models.py::TestSkillAssessmentModel::test_skill_assessment_auto_generated_nodes PASSED [ 81%]\ntests/unit/test_user_profile_models.py::TestSafetyCertificationModel::test_safety_certification_model_exists PASSED [ 81%]\ntests/unit/test_user_profile_models.py::TestSafetyCertificationModel::test_safety_certification_has_db_decorator PASSED [ 81%]\ntests/unit/test_user_profile_models.py::TestSafetyCertificationModel::test_safety_certification_fields PASSED [ 81%]\ntests/unit/test_user_profile_models.py::TestSafetyCertificationModel::test_safety_certification_user_profile_relationship PASSED [ 82%]\ntests/unit/test_user_profile_models.py::TestSafetyCertificationModel::test_safety_certification_types PASSED [ 82%]\ntests/unit/test_user_profile_models.py::TestSafetyCertificationModel::test_safety_certification_validity_tracking PASSED [ 82%]\ntests/unit/test_user_profile_models.py::TestSafetyCertificationModel::test_safety_certification_issuing_organization PASSED [ 82%]\ntests/unit/test_user_profile_models.py::TestUserProfileModelIntegration::test_user_profile_models_exist PASSED [ 83%]\ntests/unit/test_user_profile_models.py::TestUserProfileModelIntegration::test_user_profile_skill_relationships PASSED [ 83%]\ntests/unit/test_user_profile_models.py::TestUserProfileModelIntegration::test_user_profile_safety_relationships PASSED [ 83%]\ntests/unit/test_user_profile_models.py::TestUserProfileModelIntegration::test_user_profile_hierarchy PASSED [ 84%]\ntests/unit/test_user_profile_models.py::TestUserProfileBusinessLogic::test_skill_level_progression PASSED [ 84%]\ntests/unit/test_user_profile_models.py::TestUserProfileBusinessLogic::test_experience_years_validation PASSED [ 84%]\ntests/unit/test_user_profile_models.py::TestUserProfileBusinessLogic::test_proficiency_score_validation PASSED [ 84%]\ntests/unit/test_user_profile_models.py::TestUserProfileBusinessLogic::test_safety_certification_status PASSED [ 85%]\ntests/unit/test_user_profile_models.py::TestUserProfileRecommendations::test_preferred_brands_for_recommendations PASSED [ 85%]\ntests/unit/test_user_profile_models.py::TestUserProfileRecommendations::test_project_types_for_recommendations PASSED [ 85%]\ntests/unit/test_user_profile_models.py::TestUserProfileRecommendations::test_skill_categories_for_recommendations PASSED [ 86%]\ntests/unit/test_user_profile_models.py::TestUserProfileRecommendations::test_proficiency_based_recommendations PASSED [ 86%]\ntests/unit/test_user_profile_models.py::TestUserProfilePerformance::test_user_profile_indexing PASSED [ 86%]\ntests/unit/test_user_profile_models.py::TestUserProfilePerformance::test_skill_assessment_indexing PASSED [ 86%]\ntests/unit/test_user_profile_models.py::TestUserProfilePerformance::test_safety_certification_indexing PASSED [ 87%]\ntests/unit/test_user_profile_models.py::TestUserProfilePerformance::test_json_array_indexing PASSED [ 87%]\ntests/unit/test_user_profile_models.py::TestUserProfileAuditTrail::test_user_profile_audit_trail PASSED [ 87%]\ntests/unit/test_user_profile_models.py::TestUserProfileAuditTrail::test_skill_assessment_audit_trail PASSED [ 87%]\ntests/unit/test_user_profile_models.py::TestUserProfileAuditTrail::test_safety_certification_audit_trail PASSED [ 88%]\ntests/unit/test_vendor_models.py::TestVendorModel::test_vendor_model_has_db_decorator PASSED [ 88%]\ntests/unit/test_vendor_models.py::TestVendorModel::test_vendor_model_fields PASSED [ 88%]\ntests/unit/test_vendor_models.py::TestVendorModel::test_vendor_unique_code_constraint PASSED [ 89%]\ntests/unit/test_vendor_models.py::TestVendorModel::test_vendor_type_validation PASSED [ 89%]\ntests/unit/test_vendor_models.py::TestVendorModel::test_vendor_contact_information PASSED [ 89%]\ntests/unit/test_vendor_models.py::TestVendorModel::test_vendor_address_jsonb_field PASSED [ 89%]\ntests/unit/test_vendor_models.py::TestVendorModel::test_vendor_business_attributes PASSED [ 90%]\ntests/unit/test_vendor_models.py::TestVendorModel::test_vendor_soft_delete_support PASSED [ 90%]\ntests/unit/test_vendor_models.py::TestVendorModel::test_vendor_auto_generated_nodes PASSED [ 90%]\ntests/unit/test_vendor_models.py::TestProductPricingModel::test_product_pricing_model_has_db_decorator PASSED [ 91%]\ntests/unit/test_vendor_models.py::TestProductPricingModel::test_product_pricing_model_fields PASSED [ 91%]\ntests/unit/test_vendor_models.py::TestProductPricingModel::test_product_pricing_foreign_keys PASSED [ 91%]\ntests/unit/test_vendor_models.py::TestProductPricingModel::test_product_pricing_decimal_fields PASSED [ 91%]\ntests/unit/test_vendor_models.py::TestProductPricingModel::test_product_pricing_quantity_management PASSED [ 92%]\ntests/unit/test_vendor_models.py::TestProductPricingModel::test_product_pricing_price_breaks_jsonb PASSED [ 92%]\ntests/unit/test_vendor_models.py::TestProductPricingModel::test_product_pricing_temporal_fields PASSED [ 92%]\ntests/unit/test_vendor_models.py::TestProductPricingModel::test_product_pricing_currency_support PASSED [ 93%]\ntests/unit/test_vendor_models.py::TestProductPricingModel::test_product_pricing_auto_generated_nodes PASSED [ 93%]\ntests/unit/test_vendor_models.py::TestInventoryLevelModel::test_inventory_level_model_has_db_decorator PASSED [ 93%]\ntests/unit/test_vendor_models.py::TestInventoryLevelModel::test_inventory_level_model_fields PASSED [ 93%]\ntests/unit/test_vendor_models.py::TestInventoryLevelModel::test_inventory_level_foreign_keys PASSED [ 94%]\ntests/unit/test_vendor_models.py::TestInventoryLevelModel::test_inventory_quantity_fields PASSED [ 94%]\ntests/unit/test_vendor_models.py::TestInventoryLevelModel::test_inventory_availability_status PASSED [ 94%]\ntests/unit/test_vendor_models.py::TestInventoryLevelModel::test_inventory_location_tracking PASSED [ 94%]\ntests/unit/test_vendor_models.py::TestInventoryLevelModel::test_inventory_lead_time_tracking PASSED [ 95%]\ntests/unit/test_vendor_models.py::TestInventoryLevelModel::test_inventory_temporal_tracking PASSED [ 95%]\ntests/unit/test_vendor_models.py::TestInventoryLevelModel::test_inventory_level_auto_generated_nodes PASSED [ 95%]\ntests/unit/test_vendor_models.py::TestVendorModelIntegration::test_vendor_models_exist PASSED [ 96%]\ntests/unit/test_vendor_models.py::TestVendorModelIntegration::test_vendor_product_relationships PASSED [ 96%]\ntests/unit/test_vendor_models.py::TestVendorModelIntegration::test_multi_vendor_support PASSED [ 96%]\ntests/unit/test_vendor_models.py::TestVendorModelIntegration::test_vendor_data_consistency PASSED [ 96%]\ntests/unit/test_vendor_models.py::TestVendorBusinessLogic::test_vendor_preferred_status PASSED [ 97%]\ntests/unit/test_vendor_models.py::TestVendorBusinessLogic::test_pricing_validity_periods PASSED [ 97%]\ntests/unit/test_vendor_models.py::TestVendorBusinessLogic::test_inventory_reorder_logic PASSED [ 97%]\ntests/unit/test_vendor_models.py::TestVendorBusinessLogic::test_quantity_availability_calculation PASSED [ 98%]\ntests/unit/test_vendor_models.py::TestVendorPerformance::test_vendor_indexing_strategy PASSED [ 98%]\ntests/unit/test_vendor_models.py::TestVendorPerformance::test_product_pricing_indexing PASSED [ 98%]\ntests/unit/test_vendor_models.py::TestVendorPerformance::test_inventory_level_indexing PASSED [ 98%]\ntests/unit/test_vendor_models.py::TestVendorPerformance::test_pricing_query_optimization PASSED [ 99%]\ntests/unit/test_vendor_models.py::TestVendorAuditTrail::test_vendor_audit_trail PASSED [ 99%]\ntests/unit/test_vendor_models.py::TestVendorAuditTrail::test_pricing_audit_trail PASSED [ 99%]\ntests/unit/test_vendor_models.py::TestVendorAuditTrail::test_inventory_audit_trail PASSED [100%]\n\n=================================== ERRORS ====================================\n_ ERROR at setup of TestKnowledgeGraphPerformance.test_node_creation_performance _\ntests\\unit\\test_neo4j_knowledge_graph.py:409: in knowledge_graph_service\n    with patch('neo4j.GraphDatabase.driver') as mock_driver:\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:1430: in __enter__\n    self.target = self.getter()\n                  ^^^^^^^^^^^^^\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pkgutil.py:715: in resolve_name\n    result = getattr(result, p)\n             ^^^^^^^^^^^^^^^^^^\nE   AttributeError: module 'neo4j' has no attribute 'GraphDatabase'\n_ ERROR at setup of TestKnowledgeGraphPerformance.test_relationship_creation_performance _\ntests\\unit\\test_neo4j_knowledge_graph.py:409: in knowledge_graph_service\n    with patch('neo4j.GraphDatabase.driver') as mock_driver:\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:1430: in __enter__\n    self.target = self.getter()\n                  ^^^^^^^^^^^^^\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pkgutil.py:715: in resolve_name\n    result = getattr(result, p)\n             ^^^^^^^^^^^^^^^^^^\nE   AttributeError: module 'neo4j' has no attribute 'GraphDatabase'\n___ ERROR at setup of TestKnowledgeGraphPerformance.test_query_performance ____\ntests\\unit\\test_neo4j_knowledge_graph.py:409: in knowledge_graph_service\n    with patch('neo4j.GraphDatabase.driver') as mock_driver:\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:1430: in __enter__\n    self.target = self.getter()\n                  ^^^^^^^^^^^^^\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\pkgutil.py:715: in resolve_name\n    result = getattr(result, p)\n             ^^^^^^^^^^^^^^^^^^\nE   AttributeError: module 'neo4j' has no attribute 'GraphDatabase'\n================================== FAILURES ===================================\n______________ TestVectorDatabaseService.test_create_collection _______________\ntests\\unit\\test_chromadb_vector_database.py:167: in test_create_collection\n    assert args[0] == collection_name\n           ^^^^^^^\nE   IndexError: tuple index out of range\n----------------------------- Captured log setup ------------------------------\nWARNING  core.services.vector_database:vector_database.py:142 ChromaDB not available, using mock implementation\n______ TestHybridRecommendationPipeline.test_component_failure_handling _______\ntests\\unit\\test_hybrid_recommendation_pipeline.py:112: in test_component_failure_handling\n    assert status[\"overall_healthy\"] is False\nE   assert True is False\n______ TestHybridRecommendationPipeline.test_invalid_request_validation _______\ntests\\unit\\test_hybrid_recommendation_pipeline.py:138: in test_invalid_request_validation\n    invalid_request = HybridRecommendationRequest(\n<string>:12: in __init__\n    ???\ncore\\models\\hybrid_recommendations.py:30: in __post_init__\n    raise ValueError(\"User query cannot be empty\")\nE   ValueError: User query cannot be empty\n________ TestRecommendationEngine.test_safety_requirements_integration ________\ntests\\unit\\test_hybrid_recommendation_pipeline.py:306: in test_safety_requirements_integration\n    mock_openai.assess_safety_requirements.assert_called_once()\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'assess_safety_requirements' to have been called once. Called 0 times.\n------------------------------ Captured log call ------------------------------\nERROR    core.services.hybrid_recommendation_pipeline:hybrid_recommendation_pipeline.py:167 Safety recommendations failed: Must specify at least one tool\n_________________ TestResultMerger.test_result_deduplication __________________\ntests\\unit\\test_hybrid_recommendation_pipeline.py:401: in test_result_deduplication\n    deduplicated = result_merger.deduplicate_results(results)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ncore\\services\\hybrid_recommendation_pipeline.py:277: in deduplicate_results\n    existing[\"reasoning\"] = result.get(\"reasoning\", existing[\"reasoning\"])\n                                                    ^^^^^^^^^^^^^^^^^^^^^\nE   KeyError: 'reasoning'\n___ TestHybridRecommendationWorkflow.test_complete_recommendation_workflow ____\ntests\\unit\\test_hybrid_recommendation_pipeline.py:607: in test_complete_recommendation_workflow\n    assert \"name\" in recommendation\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nE   TypeError: argument of type 'RecommendationResult' is not iterable\n__________ TestHybridRecommendationWorkflow.test_fallback_mechanism ___________\ntests\\unit\\test_hybrid_recommendation_pipeline.py:657: in test_fallback_mechanism\n    assert \"knowledge_graph\" not in [score.component for score in response.component_scores]\nE   AssertionError: assert 'knowledge_graph' not in ['knowledge_graph', 'vector_database', 'openai']\n------------------------------ Captured log call ------------------------------\nERROR    core.services.hybrid_recommendation_pipeline:hybrid_recommendation_pipeline.py:73 Knowledge graph recommendations failed: Neo4j connection failed\n__ TestHybridRecommendationPerformance.test_caching_performance_improvement ___\ntests\\unit\\test_hybrid_recommendation_pipeline.py:758: in test_caching_performance_improvement\n    assert cache_hit_duration < cache_miss_duration * 0.1  # At least 10x faster\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   assert 0.0 < (0.0 * 0.1)\n_______________ TestKnowledgeGraphService.test_create_tool_node _______________\ntests\\unit\\test_neo4j_knowledge_graph.py:155: in test_create_tool_node\n    mock_session.run.assert_called_once()\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'run' to have been called once. Called 0 times.\n----------------------------- Captured log setup ------------------------------\nWARNING  core.services.knowledge_graph:knowledge_graph.py:149 Neo4j driver not available, using mock implementation\n_______________ TestKnowledgeGraphService.test_create_task_node _______________\ntests\\unit\\test_neo4j_knowledge_graph.py:183: in test_create_task_node\n    mock_session.run.assert_called_once()\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'run' to have been called once. Called 0 times.\n----------------------------- Captured log setup ------------------------------\nWARNING  core.services.knowledge_graph:knowledge_graph.py:149 Neo4j driver not available, using mock implementation\n___________ TestKnowledgeGraphService.test_create_safety_rule_node ____________\ntests\\unit\\test_neo4j_knowledge_graph.py:211: in test_create_safety_rule_node\n    mock_session.run.assert_called_once()\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'run' to have been called once. Called 0 times.\n----------------------------- Captured log setup ------------------------------\nWARNING  core.services.knowledge_graph:knowledge_graph.py:149 Neo4j driver not available, using mock implementation\n_________ TestKnowledgeGraphService.test_create_used_for_relationship _________\ntests\\unit\\test_neo4j_knowledge_graph.py:235: in test_create_used_for_relationship\n    mock_session.run.assert_called_once()\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'run' to have been called once. Called 0 times.\n----------------------------- Captured log setup ------------------------------\nWARNING  core.services.knowledge_graph:knowledge_graph.py:149 Neo4j driver not available, using mock implementation\n_____ TestKnowledgeGraphService.test_create_requires_safety_relationship ______\ntests\\unit\\test_neo4j_knowledge_graph.py:260: in test_create_requires_safety_relationship\n    mock_session.run.assert_called_once()\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'run' to have been called once. Called 0 times.\n----------------------------- Captured log setup ------------------------------\nWARNING  core.services.knowledge_graph:knowledge_graph.py:149 Neo4j driver not available, using mock implementation\n_____________ TestKnowledgeGraphService.test_find_tools_for_task ______________\ntests\\unit\\test_neo4j_knowledge_graph.py:288: in test_find_tools_for_task\n    mock_session.run.assert_called_once()\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'run' to have been called once. Called 0 times.\n----------------------------- Captured log setup ------------------------------\nWARNING  core.services.knowledge_graph:knowledge_graph.py:149 Neo4j driver not available, using mock implementation\n______ TestKnowledgeGraphService.test_find_safety_requirements_for_tool _______\ntests\\unit\\test_neo4j_knowledge_graph.py:316: in test_find_safety_requirements_for_tool\n    mock_session.run.assert_called_once()\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'run' to have been called once. Called 0 times.\n----------------------------- Captured log setup ------------------------------\nWARNING  core.services.knowledge_graph:knowledge_graph.py:149 Neo4j driver not available, using mock implementation\n_____________ TestKnowledgeGraphService.test_get_compatible_tools _____________\ntests\\unit\\test_neo4j_knowledge_graph.py:344: in test_get_compatible_tools\n    mock_session.run.assert_called_once()\nC:\\Users\\fujif\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\unittest\\mock.py:918: in assert_called_once\n    raise AssertionError(msg)\nE   AssertionError: Expected 'run' to have been called once. Called 0 times.\n----------------------------- Captured log setup ------------------------------\nWARNING  core.services.knowledge_graph:knowledge_graph.py:149 Neo4j driver not available, using mock implementation\n_____ TestKnowledgeGraphService.test_error_handling_cypher_query_failure ______\ntests\\unit\\test_neo4j_knowledge_graph.py:397: in test_error_handling_cypher_query_failure\n    with pytest.raises(Exception) as exc_info:\nE   Failed: DID NOT RAISE <class 'Exception'>\n----------------------------- Captured log setup ------------------------------\nWARNING  core.services.knowledge_graph:knowledge_graph.py:149 Neo4j driver not available, using mock implementation\n____________ TestPromptTemplates.test_tool_recommendation_template ____________\ntests\\unit\\test_openai_integration.py:71: in test_tool_recommendation_template\n    assert \"cut wood planks\" in prompt\nE   assert 'cut wood planks' in '\\nYou are an expert DIY and tool recommendation assistant. Based on the following requirements, provide tool recommendations.\\n\\nTask: Cut wood planks for deck construction\\nUser Skill Level: intermediate\\nBudget: $500\\nWorkspace: garage\\nProject Type: deck_building\\nPreferred Brands: []\\nExisting Tools: []\\n\\nProvide recommendations in JSON format with the following structure:\\n{\\n    \"recommendations\": [\"tool1\", \"tool2\", \"tool3\"],\\n    \"reasoning\": \"Detailed explanation of why these tools are recommended\",\\n    \"confidence_score\": 0.85,\\n    \"safety_notes\": [\"safety note 1\", \"safety note 2\"],\\n    \"estimated_cost\": 250.00,\\n    \"alternative_options\": [\"alternative1\", \"alternative2\"]\\n}\\n\\nConsider safety, efficiency, budget constraints, and user skill level in your recommendations.\\n'\n_____________ TestPromptTemplates.test_project_analysis_template ______________\ncore\\services\\openai_integration.py:243: in generate_prompt\n    formatted_prompt = template.format(**data)\n                       ^^^^^^^^^^^^^^^^^^^^^^^\nE   KeyError: 'user_skill_level'\n\nDuring handling of the above exception, another exception occurred:\ntests\\unit\\test_openai_integration.py:105: in test_project_analysis_template\n    prompt = templates.generate_prompt(\"project_analysis\", request_data)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ncore\\services\\openai_integration.py:247: in generate_prompt\n    raise ValueError(f\"Missing required template variable: {e}\")\nE   ValueError: Missing required template variable: 'user_skill_level'\n___________ TestPromptTemplates.test_requirement_analysis_template ____________\ntests\\unit\\test_openai_integration.py:125: in test_requirement_analysis_template\n    assert \"requirement analysis\" in prompt.lower()\nE   assert 'requirement analysis' in '\\nyou are an expert at understanding and analyzing diy project requirements from natural language descriptions.\\n\\nuser query: i need to build shelves in my closet\\nspace dimensions: 6ft x 3ft x 8ft\\nload requirements: books and storage boxes\\nskill level: beginner\\n\\nextract and analyze the requirements in json format:\\n{\\n    \"intent\": \"requirement_analysis\",\\n    \"extracted_requirements\": {\\n        \"primary_task\": \"build shelves\",\\n        \"space_constraints\": \"6ft x 3ft x 8ft\",\\n        \"load_capacity\": \"books and storage boxes\",\\n        \"material_preferences\": []\\n    },\\n    \"clarifying_questions\": [\"what material preference?\", \"any weight limits?\"],\\n    \"confidence\": 0.9\\n}\\n\\nfocus on extracting specific, actionable requirements from the user\\'s description.\\n'\nE    +  where '\\nyou are an expert at understanding and analyzing diy project requirements from natural language descriptions.\\n\\nuser query: i need to build shelves in my closet\\nspace dimensions: 6ft x 3ft x 8ft\\nload requirements: books and storage boxes\\nskill level: beginner\\n\\nextract and analyze the requirements in json format:\\n{\\n    \"intent\": \"requirement_analysis\",\\n    \"extracted_requirements\": {\\n        \"primary_task\": \"build shelves\",\\n        \"space_constraints\": \"6ft x 3ft x 8ft\",\\n        \"load_capacity\": \"books and storage boxes\",\\n        \"material_preferences\": []\\n    },\\n    \"clarifying_questions\": [\"what material preference?\", \"any weight limits?\"],\\n    \"confidence\": 0.9\\n}\\n\\nfocus on extracting specific, actionable requirements from the user\\'s description.\\n' = <built-in method lower of str object at 0x0000021323695C70>()\nE    +    where <built-in method lower of str object at 0x0000021323695C70> = '\\nYou are an expert at understanding and analyzing DIY project requirements from natural language descriptions.\\n\\nUser Query: I need to build shelves in my closet\\nSpace Dimensions: 6ft x 3ft x 8ft\\nLoad Requirements: books and storage boxes\\nSkill Level: beginner\\n\\nExtract and analyze the requirements in JSON format:\\n{\\n    \"intent\": \"requirement_analysis\",\\n    \"extracted_requirements\": {\\n        \"primary_task\": \"build shelves\",\\n        \"space_constraints\": \"6ft x 3ft x 8ft\",\\n        \"load_capacity\": \"books and storage boxes\",\\n        \"material_preferences\": []\\n    },\\n    \"clarifying_questions\": [\"What material preference?\", \"Any weight limits?\"],\\n    \"confidence\": 0.9\\n}\\n\\nFocus on extracting specific, actionable requirements from the user\\'s description.\\n'.lower\n______ TestOpenAIIntegrationService.test_response_validation_and_parsing ______\ntests\\unit\\test_openai_integration.py:405: in test_response_validation_and_parsing\n    response = service.get_tool_recommendations(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ncore\\services\\openai_integration.py:339: in get_tool_recommendations\n    raise ValueError(f\"OpenAI response missing required field: {field}\")\nE   ValueError: OpenAI response missing required field: safety_notes\n_______ TestOpenAIIntegrationService.test_rate_limiting_and_retry_logic _______\ntests\\unit\\test_openai_integration.py:473: in test_rate_limiting_and_retry_logic\n    response = service.get_tool_recommendations_with_retry(request, max_retries=2)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ncore\\services\\openai_integration.py:424: in get_tool_recommendations_with_retry\n    return self.get_tool_recommendations(request)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ncore\\services\\openai_integration.py:339: in get_tool_recommendations\n    raise ValueError(f\"OpenAI response missing required field: {field}\")\nE   ValueError: OpenAI response missing required field: safety_notes\n------------------------------ Captured log call ------------------------------\nERROR    core.services.openai_integration:openai_integration.py:324 OpenAI API request failed: Rate limit exceeded\nWARNING  core.services.openai_integration:openai_integration.py:429 Rate limit hit, retrying in 2s (attempt 1/2)\n____________ TestOpenAIIntegrationService.test_prompt_optimization ____________\ntests\\unit\\test_openai_integration.py:521: in test_prompt_optimization\n    assert len(prompt_content) < 4000  # Should be truncated\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   assert 5724 < 4000\nE    +  where 5724 = len('\\nYou are an expert DIY and tool recommendation assistant. Based on the following requirements, provide tool recommendations.\\n\\nTasknUser Skill Level: beginner\\nBudget: $100\\nWorkspace: garage\\nProject Type: test\\nPreferred Brands: []\\nExisting Tools: []\\n\\nProvide recommendations in JSON format with the following structure:\\n{\\n    \"recommendations\": [\"tool1\", \"tool2\", \"tool3\"],\\n    \"reasoning\": \"Detailed explanation of why these tools are recommended\",\\n    \"confidence_score\": 0.85,\\n    \"safety_notes\": [\"safety note 1\", \"safety note 2\"],\\n    \"estimated_cost\": 250.00,\\n    \"alternative_options\": [\"alternative1\", \"alternative2\"]\\n}\\n\\nConsider safety, efficiency, budget constraints, and user skill level in your recommendations.\\n')\n____ TestOpenAIIntegrationPerformance.test_tool_recommendation_performance ____\ntests\\unit\\test_openai_integration.py:563: in test_tool_recommendation_performance\n    response = service.get_tool_recommendations(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ncore\\services\\openai_integration.py:339: in get_tool_recommendations\n    raise ValueError(f\"OpenAI response missing required field: {field}\")\nE   ValueError: OpenAI response missing required field: safety_notes\n_ TestRegisterNodeDecorator.test_register_node_supports_standard_sdk_patterns _\ntests\\unit\\test_sdk_compliance_foundation.py:132: in test_register_node_supports_standard_sdk_patterns\n    @register_node(**pattern)\n     ^^^^^^^^^^^^^^^^^^^^^^^^\nE   TypeError: register_node() got an unexpected keyword argument 'tags'\n------------------------------ Captured log call ------------------------------\nWARNING  root:base.py:2030 Overwriting existing node registration for 'TestNode'\n___ TestNodeExecutionPatterns.test_node_implements_run_as_primary_interface ___\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:291: in __init__\n    self._validate_config()\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:547: in _validate_config\n    if param_def.required and param_def.default is None:\n       ^^^^^^^^^^^^^^^^^^\nE   AttributeError: 'dict' object has no attribute 'required'\n\nThe above exception was the direct cause of the following exception:\ntests\\unit\\test_sdk_compliance_foundation.py:301: in test_node_implements_run_as_primary_interface\n    node = TestNode()\n           ^^^^^^^^^^\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:295: in __init__\n    raise NodeConfigurationError(\nE   kailash.sdk_exceptions.NodeConfigurationError: Failed to initialize node 'TestNode': 'dict' object has no attribute 'required'\n------------------------------ Captured log call ------------------------------\nWARNING  root:base.py:2030 Overwriting existing node registration for 'TestNode'\n_ TestNodeExecutionPatterns.test_workflow_build_method_called_before_execution _\ntests\\unit\\test_sdk_compliance_foundation.py:338: in get_parameters\n    return {\"test_param\": NodeParameter(type=str, required=False)}\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   pydantic_core._pydantic_core.ValidationError: 1 validation error for NodeParameter\nE   name\nE     Field required [type=missing, input_value={'type': <class 'str'>, 'required': False}, input_type=dict]\nE       For further information visit https://errors.pydantic.dev/2.11/v/missing\n\nThe above exception was the direct cause of the following exception:\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:291: in __init__\n    self._validate_config()\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:543: in _validate_config\n    raise NodeConfigurationError(f\"Failed to get node parameters: {e}\") from e\nE   kailash.sdk_exceptions.NodeConfigurationError: Failed to get node parameters: 1 validation error for NodeParameter\nE   name\nE     Field required [type=missing, input_value={'type': <class 'str'>, 'required': False}, input_type=dict]\nE       For further information visit https://errors.pydantic.dev/2.11/v/missing\n\nThe above exception was the direct cause of the following exception:\n..\\..\\venv\\Lib\\site-packages\\kailash\\workflow\\builder.py:1055: in build\n    workflow.add_node(\n..\\..\\venv\\Lib\\site-packages\\kailash\\workflow\\graph.py:220: in add_node\n    node_instance = self._create_node_instance(node_class, node_id, config)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\venv\\Lib\\site-packages\\kailash\\workflow\\graph.py:169: in _create_node_instance\n    return node_class(id=node_id, **config)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:295: in __init__\n    raise NodeConfigurationError(\nE   kailash.sdk_exceptions.NodeConfigurationError: Failed to initialize node 'test_query': Failed to get node parameters: 1 validation error for NodeParameter\nE   name\nE     Field required [type=missing, input_value={'type': <class 'str'>, 'required': False}, input_type=dict]\nE       For further information visit https://errors.pydantic.dev/2.11/v/missing\n\nThe above exception was the direct cause of the following exception:\ntests\\unit\\test_sdk_compliance_foundation.py:348: in test_workflow_build_method_called_before_execution\n    built_workflow = workflow.build()\n                     ^^^^^^^^^^^^^^^^\n..\\..\\venv\\Lib\\site-packages\\kailash\\workflow\\builder.py:1059: in build\n    raise WorkflowValidationError(\nE   kailash.sdk_exceptions.WorkflowValidationError: Failed to add node 'test_query' to workflow: Failed to initialize node 'test_query': Failed to get node parameters: 1 validation error for NodeParameter\nE   name\nE     Field required [type=missing, input_value={'type': <class 'str'>, 'required': False}, input_type=dict]\nE       For further information visit https://errors.pydantic.dev/2.11/v/missing\n------------------------------ Captured log call ------------------------------\nWARNING  root:base.py:2030 Overwriting existing node registration for 'TestNode'\n_ TestStringBasedNodeConfigurations.test_workflow_uses_string_node_references _\ntests\\unit\\test_sdk_compliance_foundation.py:401: in test_workflow_uses_string_node_references\n    node_types = [node[\"node_type\"] for node in nodes]\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ntests\\unit\\test_sdk_compliance_foundation.py:401: in <listcomp>\n    node_types = [node[\"node_type\"] for node in nodes]\n                  ^^^^^^^^^^^^^^^^^\nE   TypeError: string indices must be integers, not 'str'\n_ TestStringBasedNodeConfigurations.test_workflow_rejects_object_based_node_instantiation _\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:291: in __init__\n    self._validate_config()\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:547: in _validate_config\n    if param_def.required and param_def.default is None:\n       ^^^^^^^^^^^^^^^^^^\nE   AttributeError: 'dict' object has no attribute 'required'\n\nThe above exception was the direct cause of the following exception:\ntests\\unit\\test_sdk_compliance_foundation.py:426: in test_workflow_rejects_object_based_node_instantiation\n    mock_node_instance = MockNode()\n                         ^^^^^^^^^^\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:295: in __init__\n    raise NodeConfigurationError(\nE   kailash.sdk_exceptions.NodeConfigurationError: Failed to initialize node 'MockNode': 'dict' object has no attribute 'required'\n_ TestStringBasedNodeConfigurations.test_workflow_parameter_injection_patterns _\ntests\\unit\\test_sdk_compliance_foundation.py:441: in test_workflow_parameter_injection_patterns\n    assert demo_result[\"method_1_config\"] is True, \"Direct configuration parameters not demonstrated\"\nE   AssertionError: Direct configuration parameters not demonstrated\nE   assert False is True\n________ TestComplianceIntegration.test_compliance_violation_detection ________\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:291: in __init__\n    self._validate_config()\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:547: in _validate_config\n    if param_def.required and param_def.default is None:\n       ^^^^^^^^^^^^^^^^^^\nE   AttributeError: 'dict' object has no attribute 'required'\n\nThe above exception was the direct cause of the following exception:\ntests\\unit\\test_sdk_compliance_foundation.py:621: in test_compliance_violation_detection\n    node2 = NonCompliantNode2()\n            ^^^^^^^^^^^^^^^^^^^\n..\\..\\venv\\Lib\\site-packages\\kailash\\nodes\\base.py:295: in __init__\n    raise NodeConfigurationError(\nE   kailash.sdk_exceptions.NodeConfigurationError: Failed to initialize node 'NonCompliantNode2': 'dict' object has no attribute 'required'\n- generated xml file: C:\\Users\\fujif\\OneDrive\\Documents\\GitHub\\horme-pov\\src\\new_project\\test-results-unit.xml -\n=============================== tests coverage ================================\n_______________ coverage: platform win32, python 3.11.9-final-0 _______________\n\nCoverage HTML written to dir htmlcov\nCoverage XML written to file coverage.xml\n=========================== short test summary info ===========================\nFAILED tests/unit/test_chromadb_vector_database.py::TestVectorDatabaseService::test_create_collection\nFAILED tests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPipeline::test_component_failure_handling\nFAILED tests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPipeline::test_invalid_request_validation\nFAILED tests/unit/test_hybrid_recommendation_pipeline.py::TestRecommendationEngine::test_safety_requirements_integration\nFAILED tests/unit/test_hybrid_recommendation_pipeline.py::TestResultMerger::test_result_deduplication\nFAILED tests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationWorkflow::test_complete_recommendation_workflow\nFAILED tests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationWorkflow::test_fallback_mechanism\nFAILED tests/unit/test_hybrid_recommendation_pipeline.py::TestHybridRecommendationPerformance::test_caching_performance_improvement\nFAILED tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_create_tool_node\nFAILED tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_create_task_node\nFAILED tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_create_safety_rule_node\nFAILED tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_create_used_for_relationship\nFAILED tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_create_requires_safety_relationship\nFAILED tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_find_tools_for_task\nFAILED tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_find_safety_requirements_for_tool\nFAILED tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_get_compatible_tools\nFAILED tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphService::test_error_handling_cypher_query_failure\nFAILED tests/unit/test_openai_integration.py::TestPromptTemplates::test_tool_recommendation_template\nFAILED tests/unit/test_openai_integration.py::TestPromptTemplates::test_project_analysis_template\nFAILED tests/unit/test_openai_integration.py::TestPromptTemplates::test_requirement_analysis_template\nFAILED tests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_response_validation_and_parsing\nFAILED tests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_rate_limiting_and_retry_logic\nFAILED tests/unit/test_openai_integration.py::TestOpenAIIntegrationService::test_prompt_optimization\nFAILED tests/unit/test_openai_integration.py::TestOpenAIIntegrationPerformance::test_tool_recommendation_performance\nFAILED tests/unit/test_sdk_compliance_foundation.py::TestRegisterNodeDecorator::test_register_node_supports_standard_sdk_patterns\nFAILED tests/unit/test_sdk_compliance_foundation.py::TestNodeExecutionPatterns::test_node_implements_run_as_primary_interface\nFAILED tests/unit/test_sdk_compliance_foundation.py::TestNodeExecutionPatterns::test_workflow_build_method_called_before_execution\nFAILED tests/unit/test_sdk_compliance_foundation.py::TestStringBasedNodeConfigurations::test_workflow_uses_string_node_references\nFAILED tests/unit/test_sdk_compliance_foundation.py::TestStringBasedNodeConfigurations::test_workflow_rejects_object_based_node_instantiation\nFAILED tests/unit/test_sdk_compliance_foundation.py::TestStringBasedNodeConfigurations::test_workflow_parameter_injection_patterns\nFAILED tests/unit/test_sdk_compliance_foundation.py::TestComplianceIntegration::test_compliance_violation_detection\nERROR tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphPerformance::test_node_creation_performance\nERROR tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphPerformance::test_relationship_creation_performance\nERROR tests/unit/test_neo4j_knowledge_graph.py::TestKnowledgeGraphPerformance::test_query_performance\n================== 31 failed, 324 passed, 3 errors in 13.73s ==================\n",
      "stderr": "",
      "command": "C:\\Users\\fujif\\OneDrive\\Documents\\GitHub\\horme-pov\\venv\\Scripts\\python.exe -m pytest tests/unit/ -v --tb=short --timeout=1 --junit-xml=test-results-unit.xml -m unit --cov=. --cov-report=html --cov-report=xml",
      "timeout_limit": 1,
      "max_duration": 300.0
    }
  }
}