# AI-Powered Sales Assistant Docker Image
# Comprehensive container with all dependencies for production deployment

FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libpq-dev \
    libmagic1 \
    tesseract-ocr \
    tesseract-ocr-eng \
    poppler-utils \
    libreoffice \
    && rm -rf /var/lib/apt/lists/*

# Create application user
RUN useradd --create-home --shell /bin/bash app
USER app
WORKDIR /home/app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --user --no-cache-dir -r requirements.txt

# Copy application code
COPY --chown=app:app . .

# Create necessary directories
RUN mkdir -p uploads rag_storage logs temp cache

# Set Python path
ENV PYTHONPATH=/home/app/src
ENV PATH=/home/app/.local/bin:$PATH

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Expose ports
EXPOSE 3001 8000

# Default command
CMD ["python", "start_sales_assistant.py", "--mode", "prod"]

# Development stage
FROM base as development

# Install development dependencies
RUN pip install --user --no-cache-dir \
    pytest \
    pytest-asyncio \
    black \
    flake8 \
    mypy \
    jupyter \
    ipython

# Enable hot reload for development
ENV KAILASH_DEBUG=true
ENV PYTHONPATH=/home/app/src:/home/app

CMD ["python", "start_sales_assistant.py", "--mode", "dev"]

# Production stage
FROM base as production

# Copy only production files
COPY --chown=app:app src/ src/
COPY --chown=app:app mcp_server_config.json .
COPY --chown=app:app start_sales_assistant.py .

# Production optimizations
ENV PYTHONOPTIMIZE=1
ENV KAILASH_PRODUCTION=true

# Use production startup script
CMD ["python", "start_sales_assistant.py", "--mode", "prod"]
